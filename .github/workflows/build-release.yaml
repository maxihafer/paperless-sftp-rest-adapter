name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24'

jobs:
  build-and-push:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set Docker tags
        id: tags
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "TAG=$TAG" >> $GITHUB_ENV
          
          DOCKER_TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          
          if [[ ! "$TAG" =~ .*-(alpha|beta).* ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"
          fi
          
          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  release:
    name: Release
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binaries
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-linux-amd64
          GOOS=linux GOARCH=arm64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-linux-arm64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-darwin-arm64
          GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-windows-amd64.exe
          GOOS=windows GOARCH=arm64 go build -ldflags="-w -s" -o dist/paperless-sftp-rest-adapter-windows-arm64.exe

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true